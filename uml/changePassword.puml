@startuml
actor User
participant Client
participant Server

== Changement de mot de passe ==
User -> Client: Fournir nom d'utilisateur et mot de passe

Client -> Server: Login normal (OPAQUE_ClientLogin)
Client -> Client: Possède priv1, pub1, priv2, pub2, key, key_communication
Server -> Server: Possède key_communication

User -> Client: Fournir un nouveau mot de passe 2 fois
alt Mots de passe différents
    Client -> User: Redemander les mots de passe
    User -> Client: Fournir les mots de passe
end

Client -> Server: username, client_registration_start_result = OPAQUE_ClientRegistration(newPassword)
Server -> Server: server_registration_start_result = OPAQUE_ServerRegistration(username, client_registration_start_result)
Server --> Client: server_registration_start_result
Client -> Client: client_registration_finish_result = OPAQUE_ClientRegistrationFinish(newPassword, server_registration_start_result)
Client -> Client: newKey = client_registration_finish_result.export_key

Client -> Client: Chiffrement des clés privées avec newKey
Client -> Client: auth = MAC_key_communication(username)

Client -> Server: client_registration_finish_result
Client -> Server: Envoi des nouvelles clés (auth, newCpriv1, pub1, newCpriv2, pub2)

Server -> Server: password_file' = OPAQUE_ServerRegistrationFinish(client_registration_finish_result, cpriv1, pub1, cpriv2, pub2)

alt Échange OPAQUE réussi
    Server -> Server: password_file' = OPAQUE_ServerRegistrationFinish(client_registration_finish_result, cpriv1, pub1, cpriv2, pub2)
    Server -> Server: auth' = MAC_key_communication(username)
    alt MAC valide (auth == auth')
        Server -> Server: Accepte de changer password_file par password_file' pour le username donné
    else MAC invalide (auth != auth')
        Server -> Client: Refuse de changer le mot de passe
    end
else Erreur
    Server -> Client: Refuse de changer le mot de passe
end

@enduml
